<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreOpenAPI30Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreOpenAPI30Lib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SwaggerPetstoreOpenAPI30Lib\Exceptions\ApiException;
use SwaggerPetstoreOpenAPI30Lib\Models\Order;
use SwaggerPetstoreOpenAPI30Lib\Models\OrderStatusEnum;
use SwaggerPetstoreOpenAPI30Lib\Utils\DateTimeHelper;

class StoreController extends BaseController
{
    /**
     * Returns a map of status codes to quantities
     *
     * @return array<string,int> Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getInventory(): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/store/inventory')->auth('global');

        return $this->execute($_reqBuilder);
    }

    /**
     * Place a new order in the store
     *
     * @param int|null $id
     * @param int|null $petId
     * @param int|null $quantity
     * @param \DateTime|null $shipDate
     * @param string|null $orderStatus Order Status
     * @param bool|null $complete
     *
     * @return Order Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function placeOrder(
        ?int $id = null,
        ?int $petId = null,
        ?int $quantity = null,
        ?\DateTime $shipDate = null,
        ?string $orderStatus = OrderStatusEnum::APPROVED,
        ?bool $complete = null
    ): Order {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/store/order')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('id', $id),
                FormParam::init('petId', $petId),
                FormParam::init('quantity', $quantity),
                FormParam::init('shipDate', $shipDate)->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                FormParam::init('orderStatus', $orderStatus)->serializeBy([OrderStatusEnum::class, 'checkValue']),
                FormParam::init('complete', $complete)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('405', ErrorType::init('Invalid input'))
            ->type(Order::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     *
     * @param int $orderId ID of order that needs to be fetched
     *
     * @return Order Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getOrderById(int $orderId): Order
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/store/order/{orderId}')
            ->auth('global')
            ->parameters(TemplateParam::init('orderId', $orderId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid ID supplied'))
            ->throwErrorOn('404', ErrorType::init('Order not found'))
            ->type(Order::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will
     * generate API errors
     *
     * @param int $orderId ID of the order that needs to be deleted
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteOrder(int $orderId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/store/order/{orderId}')
            ->auth('global')
            ->parameters(TemplateParam::init('orderId', $orderId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid ID supplied'))
            ->throwErrorOn('404', ErrorType::init('Order not found'));

        $this->execute($_reqBuilder, $_resHandler);
    }
}
